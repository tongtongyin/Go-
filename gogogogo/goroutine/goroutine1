package main

import (
	"fmt"
	"runtime"
	"time"
)

// 协程 Coroutine：轻量级线程，和线程看起来差不多，都是并发的去执行一些任务的。
// 所谓轻量级就是可以开1000个同时去执行
// 为什么是轻量级：非抢占式多任务处理，由协程主动交出控制权；
// 线程可以在任何时候被操作系统切换，所以线程就是抢占式多任务处理，
// 没有控制权的，做到一半，一个语句执行到一半，都可能被操作系统从中间掐掉，然后转到其他线程去做，以后还会回来给让这个线程接着做
// 协程是非抢占式的，什么时候交出控制权，什么时候不想交，是由协程内部主动决定的
// 由于非抢占式，才可以做到轻量级，因为如果是抢占式的，其他线程做到一半，要存更多的东西，上下文要存下来更多
// 非抢占式，只要处理其中切换的几个点就可以了。对资源的消耗就会小一些。
// 协程是编译器/解释器/虚拟机层面的多任务
// 多个协程可能在一个或多个线程上运行


func main() {
	var a [10]int
	for i:=0; i<10; i++ {
		go func(i int) {
			for {
				a[i]++
				runtime.Gosched()
			}
		}(i)
	}
	time.Sleep(time.Millisecond)
	fmt.Println(a)
}
